(function(require, requireNative, loadScript, exports, console, privates, apiBridge, bindingUtil, getInternalApi, $Array, $Function, $JSON, $Object, $RegExp, $String, $Error, $Promise) {'use strict';var handler=function(message,e){console.error(message)};function handle(message,e,priorStackTrace){message=formatErrorMessage(message,e,priorStackTrace);handler(message,e)}function safeCallbackApply(name,callback,args,priorStackTrace){try{$Function.apply(callback,null,args)}catch(e){handle("Error in response to "+name,e,priorStackTrace)}}function formatErrorMessage(message,e,priorStackTrace){if(e)message+=": "+safeErrorToString(e,false);var stack;try{stack=$String.self(e&&e.stack)}catch(e){}if(!priorStackTrace&&!stack)stack=getStackTrace();stack=filterExtensionStackTrace(stack);if(stack)message+="\n"+stack;if(priorStackTrace)message+="\n"+priorStackTrace;return message}function filterExtensionStackTrace(stack){if(!stack)return"";stack=$String.split(stack,"\n");stack=$Array.filter(stack,(function(line){return $String.indexOf(line,"chrome-extension://")>=0}));return $Array.join(stack,"\n")}function getStackTrace(){var e={};$Error.captureStackTrace(e,getStackTrace);return e.stack}function getExtensionStackTrace(){return filterExtensionStackTrace(getStackTrace())}function safeErrorToString(e,omitType){try{return $String.self(omitType&&e.message||e)}catch(e){return"(cannot get error message)"}}exports.$set("handle",handle);exports.$set("setHandler",(function(newHandler){handler=newHandler}));exports.$set("safeCallbackApply",safeCallbackApply);exports.$set("getStackTrace",getStackTrace);exports.$set("getExtensionStackTrace",getExtensionStackTrace);exports.$set("safeErrorToString",safeErrorToString);

})