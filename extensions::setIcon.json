(function(require, requireNative, loadScript, exports, console, privates, apiBridge, bindingUtil, getInternalApi, $Array, $Function, $JSON, $Object, $RegExp, $String, $Error, $Promise) {'use strict';var exceptionHandler=require("uncaught_exception_handler");var natives=requireNative("setIcon");var SetIconCommon=natives.SetIconCommon;var inServiceWorker=natives.IsInServiceWorker();function loadImagePathForServiceWorker(path,callback,failureCallback){let fetchPromise=fetch(path);let blobPromise=$Promise.then(fetchPromise,(response=>{if(!response.ok){throw $Error.self("Response from fetching icon not ok.")}return response.blob()}));let imagePromise=$Promise.then(blobPromise,(blob=>createImageBitmap(blob)));let imageDataPromise=$Promise.then(imagePromise,(image=>{var canvas=new OffscreenCanvas(image.width,image.height);var canvasContext=canvas.getContext("2d");canvasContext.clearRect(0,0,canvas.width,canvas.height);canvasContext.drawImage(image,0,0,canvas.width,canvas.height);var imageData=canvasContext.getImageData(0,0,canvas.width,canvas.height);callback(imageData)}));$Promise.catch(imageDataPromise,(function(error){var message=`Failed to set icon '${path}': `+exceptionHandler.safeErrorToString(error,true);failureCallback(message)}))}function loadImagePathForNonServiceWorker(path,callback,failureCallback){var img=new Image;img.onerror=function(){var message="Could not load action icon '"+path+"'.";console.error(message);failureCallback(message)};img.onload=function(){var canvas=document.createElement("canvas");canvas.width=img.width;canvas.height=img.height;var canvasContext=canvas.getContext("2d");canvasContext.clearRect(0,0,canvas.width,canvas.height);canvasContext.drawImage(img,0,0,canvas.width,canvas.height);var imageData=canvasContext.getImageData(0,0,canvas.width,canvas.height);callback(imageData)};img.src=path}function loadImagePath(path,callback,failureCallback){if(inServiceWorker){loadImagePathForServiceWorker(path,callback,failureCallback)}else{loadImagePathForNonServiceWorker(path,callback,failureCallback)}}function smellsLikeImageData(imageData){return typeof imageData=="object"&&"width"in imageData&&"height"in imageData&&"data"in imageData}function verifyImageData(imageData){if(!smellsLikeImageData(imageData)){throw new Error("The imageData property must contain an ImageData object or"+" dictionary of ImageData objects.")}}function setIcon(details,callback,failureCallback){if("iconIndex"in details){callback(details);return}if("imageData"in details){if(smellsLikeImageData(details.imageData)){var imageData=details.imageData;details.imageData={__proto__:null};details.imageData[imageData.width.toString()]=imageData}else if(typeof details.imageData=="object"&&Object.getOwnPropertyNames(details.imageData).length!==0){for(var sizeKey in details.imageData){verifyImageData(details.imageData[sizeKey])}}else{verifyImageData(false)}callback(SetIconCommon(details));return}if("path"in details){if(typeof details.path=="object"){details.imageData={__proto__:null};var detailKeyCount=0;for(var iconSize in details.path){++detailKeyCount;loadImagePath(details.path[iconSize],function(size,imageData){details.imageData[size]=imageData;if(--detailKeyCount==0){callback(SetIconCommon(details))}}.bind(null,iconSize),(function(errorMessage){if(failureCallback){failureCallback(errorMessage);failureCallback=null}}))}if(detailKeyCount==0)throw new Error("The path property must not be empty.")}else if(typeof details.path=="string"){details.imageData={__proto__:null};loadImagePath(details.path,(function(imageData){details.imageData[imageData.width.toString()]=imageData;delete details.path;callback(SetIconCommon(details))}),failureCallback)}return}throw new Error("Either the path or imageData property must be specified.")}function getSetIconHandler(methodName){return function(details,successCallback,failureCallback){var onIconRetrieved=function(iconSpec){bindingUtil.sendRequest(methodName,[iconSpec,successCallback],undefined)};setIcon(details,onIconRetrieved,failureCallback)}}exports.$set("setIcon",setIcon);exports.$set("getSetIconHandler",getSetIconHandler);

})
